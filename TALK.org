* Me
** Hack Reactor Remote 13 (early 2016)
** Some computer science background but knew more about math and economics prior
   I say this because background and motivation really help determine
   what you will find interesting or useful.  I was really interested
   in mathematics (and particularly finitist math) prior to hack
   reactor.
** Worked in three companies so far
   - Verys: consulting for big companies (web apps in common tools)
   - Panoramic: single product team (web app to manage VA claims, Elm and Haskell)
   - Consumable: Ad exchange in Rust
** Learned Clojure right after Hack Reactor on another alumni's recommendation
** Started the [[https://www.meetup.com/orange-combinator][Orange Combinator]] meetup and learned some Haskell
** Found my real passion for type theory and theorem provers
* You
** Do you like map/filter/reduce?
** Have you ever used a typed language (like TypeScript)?
** Are you interested in mathematics?
*** Don't worry if not.
    Some parts of functional programming may not be for you, but there
    is still much to gain by using it. Using functional programming
    does not require mathematical knowledge.  You will probably get
    more out of functional programming if you do, though.

    If none of this seems useful or interesting to you, please don't
    feel if you don't pursue it further.
* Minimal definition of functional programming
** A language can be called functional if you can use functions as values.
   That is to say if:
   - They can be returned from functions
   - They can be used as arguments to functions
   - They can be bound to names (assigned to variables)
** That means almost all major languages these days are functional!
   - JavaScript (as you know)
   - Java
   - Python
   - C#
   - C++
   - C
   - Smalltalk
   - Go
   - Rust
   - LISPs
   - Haskell
   - Coq
** This begs the question
   If all these languages are functional, is functional programming
   really that important or interesting?
** Of course my answer is, yes, very!
   Not all programming languages take functional programming to be
   fundamental to their design.  As such, some benefits of functional
   programming (I like to call if FP) are not available in all of
   those languages.
*** One primary argument I want to impart to you today.
    Functional programming is *fundamentally different* from other
    programming language models.
* History
  Functional programming is as old as programming as we know it today.
  Computational models began to see very serious study in the 20th
  century when some questions about the foundations of mathematics
  were being raised.
** 1928 - David Hilbert posed the Entscheidungsproblem (Decision problem)
   Does there exist a program to calculate a truth value for all
   mathematical propositions?

   Hilbert's outlook on mathematics can almost entirely be summarized
   by the words on his tombstone.
   #+BEGIN_QUOTE
   We must know, we will know.
   #+END_QUOTE
   He was sure that mathematics could be "solved", in some sense.  His
   questions were also well known enough that many mathematicians
   undertook to solve them.
*** Systems invented to answer it spawned computation as we know it
*** There are three most famous approaches
   1. Turing Machines
   2. Lambda Calculus (Church)
   3. Recursive Functions (Kleene)
** Lambda Calculus published in 1936 by Alonzo Church
   I want to emphasize that turing machines and lambda calculus
   developed in tandem around the same time.  That is to say that
   Lambda Calculus
*** A very simple grammar consisting of only a few constructs.
*** Turing proved the Lambda Calculus and Turing Machines equivalent
*** Church-Turing thesis
   Church and Turing separately proved the Decision problem
   impossible.

   Implication: you can program _only_ using functions!
* The story of Lambda Calculus continues beyond the Decision problem
  Untyped Lambda Calculus as stated originally was proved to be
  inconsistent as a logic.
  - Simply typed lambda calculus (Church in 1940)
  - System F (lambda calculus with polymorphism by Girard and
    Reynolds in 1972 and 74, respectively)
  - Dependently typed lambda calculus (Haskell Curry, Howard, de Bruijn)
  - Pi calculus
  - System K and modal logics
  - Many more
** LISP - John McCarthy (1958)
   Implementation of untyped lambda calculus
*** Looks like this
   #+BEGIN_SRC scheme
   (define increment-all (xs)
     (map (lambda (x) (+ x 1)) xs))
   #+END_SRC
*** Defining features
   - prefix notation
   - parenthesis
   - homoiconicity (code has same tree structure as data structures)
*** Major innovations
   - Garbage collection
   - Macros
*** Many descendents today, including
   - Racket
   - Clojure
   - Chez scheme
   - Common Lisp
** ML - Robin Milner and others (1973)
   Implementation of a typed lambda calculus
*** Looks like this
   - SML (closer to original)
   #+BEGIN_SRC sml
   fun incrementAll (xs: int list) = map (fn x => x + 1) xs
   (* Equivalent to *)
   val incrementAll2 = map (fn x => x + 1)
   #+END_SRC

   - Haskell (modern descendent)
   #+BEGIN_SRC haskell
   incrementAll :: [Int] -> [Int]
   incrementAll xs = fmap (+1) xs
   -- equivalent to
   incrementAll2 :: [Int] -> [Int]
   incrementAll2 = fmap (+1)
   #+END_SRC
*** Defining features (more variance in this family than lisp)
   - significant whitespace
   - separate type signatures from term definitions
*** Major innovations
   - Type inference
   - Polymorphism
   - Theorem proving
   - Abstract machines
** FP distinction comes from the different underlying model of computation
   Taking Lambda Calculus as the fundamental computational model
   (instead of the Turing Machine)
* Additionally, there are many different flavors of FP
  I already discussed the LISP and ML families, but there are further
  distinctions based on further refinements to the lambda calculus.
** Varieties of FP come from many things but two stick out:
   - Type system
   - Evaluation strategy (I won't cover this too much but you can look
     up lazy and eager evaluation)
** Today there are a few different levels of FP with common implementations
   - Untyped Lambda Calculus (implementation in LISPS)
   - Typed Lambda Calculus (ML families like OCaml)
   - Typed Lambda Calculus without side effects (Primarily Haskell)
   - Dependently typed Lambda Calculus (also in the ML family like
     Agda, Idris, Coq) (without side effects, *and* strongly normalizing)
** At each level of FP come extra powers.
   This is slightly counterintuitive because at each level, something
   is being constrained.
*** From untyped to typed Lambda Calculus
    The range of valid expressions is constrained.  This means that
    expressions (at least those without side effects and divergence)
    are always well typed.
*** typed Lambda Calculus to typed Lambda Calculus without effects
    Untracked side effects are removed. This means that expressions
    with side effects are explicitly tracked. Furthermore, side
    effects can be abstracted over and generalized.
*** Typed Lambda Calculus without effects to dependent types
    Lambda Calculus, all expressions must normalize (terminate). But
    in this setting, types correspond to propositions and programs
    correspond to proofs.
** "Pure" Functional Programming
   A slightly unfortunate common phrase you will hear when discussing
   FP.  This means programming *only* with functions (no mutable state
   or mutation).  To me, this means using the Lambda Calculus
   exclusively in your program.

   Programs written in typed Lambda Calculus without effects and in
   dependently typed Lambda Calculus are by definition written
   exclusively in Lambda Calculus.

   However, it is very possible to write "purely" functional programs
   in other varieties.
* Why "Pure" Functional Programming
  There are many niceties that come with using the Lambda Calculus
  exclusively.

  I asked attendees of the Orange Combinator meetup why
  functional programming was good. The standout answer was a
  consequence of pure functional programming: "referential
  transparency".

  First, an aside:
** Grammar and semantics of the untyped Lambda Calculus
   Don't worry too much about this if you are only interested in the
   professional benefits of functional programming. I am saying this
   just to make the next few points more clear.
*** Grammar in rough Bachus-Nauer Form
   #+BEGIN_EXAMPLE
   Expression := Variable
               | λ x. Expression (This is called lambda abstraction)
               | Expression Expression (This is called lambda application)
   #+END_EXAMPLE

   Here is an example (The parenthesis are for grouping clarity)
   #+BEGIN_EXAMPLE
   (λ f. λ x. λ y. f y) (λ x. x)
   #+END_EXAMPLE
*** Reduction
    1. Alpha-reduction: Names are meant to come from some infinite
       set. Variables can be renamed as long as all occurrences names
       are changed uniformly. Use this to avoid name collisions
    2. Beta-reduction: Replace bound variables with arguments in the
       body of a lambda abstraction.

    Continuing the example from above
    #+BEGIN_EXAMPLE
    (λ f. λ x. λ y. f y) (λ x. x)

    1. (λ f. λ x. λ y. f y) (λ a. a) - Alpha-reduction
    2. λ x. λ y. (λ a. a) y          - Beta-reduction
    3. λ x. λ y. y                   - Beta-reduction

    => λ x. λ y. y
    #+END_EXAMPLE
*** Some notes
    Clearly programming this way would be very hard, so modern
    implementations add primitives and values like arrays, numbers,
    strings, etc. Modern implementations also allow definitions of
    named expressions.

    At the end of the day, this is the general model of evaluation for
    most functional programming (even in the variously typed
    kinds). As you might imagine, there are many slight variations
    even from reduction strategy from which whole languages have
    sprung.
** Referential Transparency
   A working definition: An expression is referentially transparent if
   it can be replaced by the result of evaluating the expression
   without changing the program's behavior.

   Another way to say this is that the result of evaluating an
   expression depends only on the inputs to the expression.

   This requires that expressions must have no side effects and always
   return all the effects of the expression.

   Here is an example of some code that is *not* referentially transparent:
   #+BEGIN_SRC javascript
     function insertFiveNotReferentiallyTransparent(x) {
       // replacing sideEffect(x) with undefined would change the behavior
       // of the program. Note that functions that return undefined or
       // accept no parameters are often side effecting
       x.splice(10, 1, 5)
     }
   #+END_SRC

   We can make ~insertFiveNotReferentiallyTransparent~ referentially
   transparent
   #+BEGIN_SRC javascript
     // By making the expression refer only to inputs and returning a copy
     // of the data.  The fixed version can be replaced by the result of
     // evaluation.
     function insertFiveFixed(x) {
       return x.slice(0, 9).concat([5]).concat(x.slice(10))
     }
   #+END_SRC
** Semantics of Lambda Calculus and Referential Transparency
   Writing exclusively in the Lambda Calculus guarantees that all
   expressions are referentially transparent.
** Consequences related to referential transparency
*** Understanding the behavior of programs
    Understanding any piece of code is much easier when the behavior
    of the program is only determined by the inputs and outputs.  Thus
    to understand a program written in purely functional style is to
    understand the given expression *and no more*.  The state of a
    system will not effect the evaluation.
*** Time independence
    Referentially transparent expressions can be replaced with their
    results safely without effecting the rest of the program. Thus
    they can be evaluated *in any order*. In other words, purely
    functional programs can be trivially evaluated in parallel/on
    multiple cores.
*** Algebraic substitution
    Any referentially transparent expression can be replaced with what
    it evaluates to.  Therefore if two expressions evaluate to the
    same result, one can be replaced by the other.
** Other niceties
*** Simplicity
    Because the Lambda Calculus is so small, most functional languages
    have little built into the language itself.  A good example here
    is loops. ~for~ and ~while~ are syntax that compiler and
    interpreter writers have exclusive ownership over. However in
    functional languages, such constructs can be built using simpler
    pieces of the language.
*** Compositionality and expressiveness
    By definition, programs written in the functional programming
    style consist of functions composed with one another.  This leads
    to many nice ways of combining functions in an expressive manner.

    Functional programs are often much more declarative and operate
    over whole pieces rather than individual parts.

    #+BEGIN_SRC haskell
    f = foldr (+) 0 . filter (> 0)
    --              ^ This dot is function composition
    #+END_SRC

    (as opposed to)
    #+BEGIN_SRC javascript
    function f (arr) {
      let sum = 0;
      for (i = 0; i < arr.length; i++) {
        if (arr[i] > 0) {
          sum = sum + arr[i];
        }
      }
      return sum
    }
    #+END_SRC
* Room to grow
  Functional programming is responsible for many of the biggest
  innovations in language design.

  - Garbage collection - First in LISP in 1958 not widely accepted
    until the 1990s
  - Software transactional memory - World class implementations in
    Haskell and Clojure. Implementations in C# canceled because of
    implementation difficulty
  - Algebraic data types - Implemented from the start in the ML
    family. Finally getting some acceptance in mainstream languages
    like Python and C#.
  - Linear types - Known for some time as a sound model for memory
    management without garbage collection. Finally got implementations
    in Rust and ATS.
  - async/await, option chaining, result chaining - Implemented first
    in Haskell and redone (with less generalization) in Swift,
    Javascript, Rust, and more.
** Plenty of active research in languages and tools based on FP
   - Distributed systems
   - Memory management
   - Program synthesis
   - Probabilistic programming
   - Secure systems
   - Applications in pure mathematics
   - CAD modeling
** Which leads me to my favorite thing about FP
   The sky is the limit on what there is to learn and explore.
   Particularly for those interested in mathematics, it is a very fun
   area of research.

   There is still a lot of engineering work to be done to make some of
   the truly amazing things from the academic community real, too.
* Concluding
  If you are interested in programming languages, the algebraic side
  of mathematics, math foundations or logic I highly recommend looking
  into the research and academic side of functional programming.

  If you are not interested in those things, there is still quite a
  lot of benefit to be gained by writing functional code.
  Particularly in large codebases, the lack of mutable state and
  reasoning capabilities of a functional style (no matter what
  language you are using) really shine.
** Freedoms
*** Freedom from
    - Global state
    - Manual memory management
    - High costs of making synchronous code concurrent
*** Freedom to
    - Apply and research very interesting topics in logic and
      programming languages
    - Use as much (or as little) abstraction as you desire
** Caveats
*** Functional programming may not be for you. That is no problem.
*** Performance
    Functional programs must be run on turing machines.  This leads to
    a lot of memory allocation and does not always cater to the
    functional style.

    However! Garbage collection technologies and linear types have
    improved so much and limit the technical downsides (along with
    much faster hardware).  Furthermore, new hardware is adding more
    cores faster than it is adding more clock cycles.  The parallelism
    inherent to a functional style means that functional programs
    benefit from hardware advances much more readily than imperative
    ones.

    Furthermore, most issues in software projects today stem from
    their resistance to change. Programming with the Lambda Calculus
    as a basis makes change possible.
** Functional programming is becoming mainstream
   The professional and productivity benefits are becoming clear.  If
   you take some time to study it, I believe you will be more
   attractive to employers in the future (on top of making you a
   better programmer).
* Further resources for the curious
  There are simply too many to list. Functional programming has arrived!
** History of Entscheidungsproblem
   - The Stanford Encyclopedia of Philosophy has an excellent history
     https://plato.stanford.edu/entries/church-turing/
** JavaScript
   - Professor Frisby's Mostly Adequate Guide to Functional Programming
     A good introduction if you know javascript
     https://mostly-adequate.gitbooks.io/mostly-adequate-guide/content/
** Scheme and Lisp
   - Try Racket at https://www.racket-lang.org
     They have friendly tutorials on the basics, web programming and
     systems programming
   - The "Little" series by Daniel Friedman and collaborators
** Haskell
   - Programming Haskell by Graham Hutton
   - The Haskell School of Music by Paul Hudak and Donya Quick
   - Type Classes
     For the Haskell curious. Paid classes at https://typeclasses.com/
** Communities
   - #functional channel in the alumni slack
   - functional programming slack (invite available at https://fpchat-invite.herokuapp.com/)
   - Your local functional programming meetup
** Blogs
   So, so many haskell blogs. I cannot begin to list them without
   forgetting the good ones.
   - Gabriel Gonzalez http://www.haskellforall.com/
   - Alexis Kind (aka Lexi Lambda) https://lexi-lambda.github.io/
** Podcasts
   Mostly now podfaded
   - Functional Geekery
   - Lambda Cast
   - Type Theory Commute
   - Type Theory Podcast
